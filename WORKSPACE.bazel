load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

BAZEL_BOOTLIN_COMMIT = "22ee91e01bbbc0711444c49102e92010fc6d6c95"

http_archive(
    name = "bazel_bootlin",
    sha256 = "3acd4ebca797fb05db00b1ebcac831fa920f503dd611c255c7f80cfad944182e",
    strip_prefix = "bazel_bootlin-%s" % BAZEL_BOOTLIN_COMMIT,
    url = "https://github.com/oliverlee/bazel_bootlin/archive/%s.tar.gz" % BAZEL_BOOTLIN_COMMIT,
)

load("@bazel_bootlin//:defs.bzl", "bootlin_toolchain")

COMMON_CXX_FLAGS = [
    "-march=native",
    "-fdiagnostics-color=always",
]

COMMON_CXX_WARNINGS = [
    "-Werror",
    "-Wall",
    "-Wextra",
    "-Wpedantic",
    "-Wconversion",
    "-Wnon-virtual-dtor",
    "-Wold-style-cast",
    "-Wcast-align",
    "-Wunused",
    "-Woverloaded-virtual",
    "-Wmisleading-indentation",
    "-Wnull-dereference",
    "-Wdouble-promotion",
    "-Wformat=2",
    "-Wimplicit-fallthrough",
]

# for mapping from buildroot version to gcc version
# see https://toolchains.bootlin.com/releases_x86-64.html
#
bootlin_toolchain(
    name = "gcc_12_2_toolchain",
    architecture = "x86-64",
    buildroot_version = "2022.08-1_bleeding",
    extra_cxxflags = [
        "-std=c++23",
        "-Wduplicated-cond",
        "-Wduplicated-branches",
        "-Wlogical-op",
        "-Wuseless-cast",
        "-Wshadow=compatible-local",  # Equivalent to -Wshadow on llvm. GCC default is stupid.
    ] + COMMON_CXX_FLAGS + COMMON_CXX_WARNINGS,
)

BAZEL_TOOLCHAIN_VERSION = "b397ad28f7927aed01e09922e6ecc4b9244ddc9e"

http_archive(
    name = "bazel_toolchain",
    sha256 = "3816f3f040f80ba2853f9d470d1148904be717592621018408fa2c98c34690cb",
    strip_prefix = "bazel-toolchain-%s" % BAZEL_TOOLCHAIN_VERSION,
    url = "https://github.com/grailbio/bazel-toolchain/archive/%s.tar.gz" % BAZEL_TOOLCHAIN_VERSION,
)

load("@bazel_toolchain//toolchain:deps.bzl", "bazel_toolchain_dependencies")
load("@bazel_toolchain//toolchain:rules.bzl", "llvm_toolchain")

bazel_toolchain_dependencies()

llvm_toolchain(
    name = "llvm_16_0_toolchain",
    cxx_flags = {
        "": [
            "-stdlib=libc++",
            "-std=c++2b",  # TODO: Once LLVM 17 is available, switch to -std=c++23 and move it to COMMON_CXX_FLAGS.
            "-Wshadow",
        ] + COMMON_CXX_FLAGS + COMMON_CXX_WARNINGS,
    },
    # Link UBSan C++ runtime libraries if the `ubsan` feature is enabled
    # https://github.com/bazelbuild/bazel/issues/12797#issuecomment-980641064
    # use `link_libs` to prevent overriding default `link_flags`
    # https://github.com/grailbio/bazel-toolchain/blob/ceeedcc4464322e05fe5b8df3749cc02273ee083/toolchain/cc_toolchain_config.bzl#L148-L150
    link_libs = {
        "": ["--driver-mode=g++"],
    },
    llvm_version = "16.0.3",
)

# register llvm first, it has better error messages
load("@llvm_16_0_toolchain//:toolchains.bzl", "llvm_register_toolchains")

llvm_register_toolchains()

register_toolchains(
    "@gcc_12_2_toolchain//:toolchain",
)

BOOST_UT_VERSION = "e53a47d37bc594e80bd5f1b8dc1ade8dce4429d3"

http_archive(
    name = "boost_ut",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "boost_ut",
    hdrs = ["include/boost/ut.hpp"],
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    sha256 = "abc90fa389a47504d06a88a56ddc9e580cf2654173bd14d211db714bb111b923",
    strip_prefix = "ut-%s" % BOOST_UT_VERSION,
    url = "https://github.com/boost-ext/ut/archive/%s.tar.gz" % BOOST_UT_VERSION,
)

GOOGLE_BENCHMARK_VERSION = "1.8.0"

http_archive(
    name = "google_benchmark",
    patch_args = ["-p1"],
    patches = ["//:third_party/google_benchmark.patch"],
    sha256 = "ea2e94c24ddf6594d15c711c06ccd4486434d9cf3eca954e2af8a20c88f9f172",
    strip_prefix = "benchmark-%s" % GOOGLE_BENCHMARK_VERSION,
    url = "https://github.com/google/benchmark/archive/refs/tags/v%s.tar.gz" % GOOGLE_BENCHMARK_VERSION,
)

BAZEL_CLANG_FORMAT_VERSION = "f4198b68887699a4d1862e44458e4969ad69fc8a"

http_archive(
    name = "bazel_clang_format",
    sha256 = "bd75df6dae8d290a716e1812c463ef4ab36869b5557d8a6dd6abb8315acfc6ac",
    strip_prefix = "bazel_clang_format-%s" % BAZEL_CLANG_FORMAT_VERSION,
    url = "https://github.com/oliverlee/bazel_clang_format/archive/%s.tar.gz" % BAZEL_CLANG_FORMAT_VERSION,
)

BAZEL_CLANG_TIDY_VERSION = "79921ab3346d61c7ae963f8fcbb7a9dc988a51bd"

http_archive(
    name = "bazel_clang_tidy",
    sha256 = "79a6321fac9d0bba5521964971be6f2b352fd6018a3ff5ca3f43521b10c9c344",
    strip_prefix = "bazel_clang_tidy-%s" % BAZEL_CLANG_TIDY_VERSION,
    url = "https://github.com/oliverlee/bazel_clang_tidy/archive/%s.tar.gz" % BAZEL_CLANG_TIDY_VERSION,
)

http_archive(
    name = "buildifier_prebuilt",
    sha256 = "e46c16180bc49487bfd0f1ffa7345364718c57334fa0b5b67cb5f27eba10f309",
    strip_prefix = "buildifier-prebuilt-6.1.0",
    urls = [
        "https://github.com/keith/buildifier-prebuilt/archive/6.1.0.tar.gz",
    ],
)

load("@buildifier_prebuilt//:deps.bzl", "buildifier_prebuilt_deps")

buildifier_prebuilt_deps()

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

load("@buildifier_prebuilt//:defs.bzl", "buildifier_prebuilt_register_toolchains")

buildifier_prebuilt_register_toolchains()

COMPILE_COMMANDS_VERSION = "3dddf205a1f5cde20faf2444c1757abe0564ff4c"

http_archive(
    name = "hedron_compile_commands",
    sha256 = "3cd0e49f0f4a6d406c1d74b53b7616f5e24f5fd319eafc1bf8eee6e14124d115",
    strip_prefix = "bazel-compile-commands-extractor-%s" % COMPILE_COMMANDS_VERSION,
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/%s.tar.gz" % COMPILE_COMMANDS_VERSION,
)

load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")

hedron_compile_commands_setup()
